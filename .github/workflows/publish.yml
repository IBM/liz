# Simple workflow for deploying static content to GitHub Pages
name: 'Build and deploy to GitHub Pages'

on:
    release:
        types: [created]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    prerequisites:
        environment: build-prerequisites
        runs-on: ubuntu-latest
        outputs:
            bug_tracker: ${{ vars.BUG_TRACKER }}
            known_issues: ${{ vars.KNOWN_ISSUES }}
            show_notice: ${{ vars.SHOW_NOTICE }}
            build_date: ${{ steps.build_environment.outputs.build_date }}
            commit_hash_short: ${{ steps.build_environment.outputs.commit_hash_short }}
            commit_hash_long: ${{ steps.build_environment.outputs.commit_hash_long }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: 'Build environment variable creation'
              id: build_environment
              run: |
                  echo "build_date=`date "+%Y-%m-%d"`" >> $GITHUB_OUTPUT
                  echo "commit_hash_short=`git rev-parse --short=11 HEAD`" >> $GITHUB_OUTPUT
                  echo "commit_hash_long=`git rev-parse HEAD`" >> $GITHUB_OUTPUT
    prepare:
        needs: prerequisites
        runs-on: ubuntu-latest
        env:
            BUG_TRACKER: ${{ needs.prerequisites.outputs.bug_tracker }}
            KNOWN_ISSUES: ${{ needs.prerequisites.outputs.known_issues }}
            BUILD_DATE: ${{ needs.prerequisites.outputs.build_date }}
            COMMIT_HASH_SHORT: ${{ needs.prerequisites.outputs.commit_hash_short }}
            COMMIT_HASH_LONG: ${{ needs.prerequisites.outputs.commit_hash_long }}
            SHOW_NOTICE: ${{ needs.prerequisites.outputs.show_notice }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Echo variables
              run: |
                  echo "Bug tracker: ${{ needs.prerequisites.outputs.bug_tracker }}"
                  echo "Known issues: ${{ needs.prerequisites.outputs.known_issues }}"
                  echo "Show notice: ${{ needs.prerequisites.outputs.show_notice }}"
                  echo "Build date: ${{ needs.prerequisites.outputs.build_date }}"
                  echo "Commit hash (short): ${{ needs.prerequisites.outputs.commit_hash_short }}"
                  echo "Commit hash (long): ${{ needs.prerequisites.outputs.commit_hash_long }}"
            - name: Patch
              run: |
                  perl -i -p -e 's/BUG_TRACKER/$ENV{BUG_TRACKER}/' public/config/app/config.json
                  perl -i -p -e 's/KNOWN_ISSUES/$ENV{KNOWN_ISSUES}/' public/config/app/config.json
                  perl -i -p -e 's/BUILD_DATE/$ENV{BUILD_DATE}/' public/config/app/config.json
                  perl -i -p -e 's/COMMIT_HASH_SHORT/$ENV{COMMIT_HASH_SHORT}/' public/config/app/config.json
                  perl -i -p -e 's/COMMIT_HASH_LONG/$ENV{COMMIT_HASH_LONG}/' public/config/app/config.json
                  perl -i -p -e 's/SHOW_NOTICE/$ENV{SHOW_NOTICE}/' public/config/app/config.json
                  perl -i -p -e 's/URL_PATH_TOKEN//' .env.github
                  perl -pi -e 's/vite build/vite build --mode github --base=\/liz\//' package.json
            - name: Upload patched app config
              uses: actions/upload-artifact@v4
              with:
                  name: patched_config
                  path: 'public/config/'
            - name: Upload patched package.json
              uses: actions/upload-artifact@v4
              with:
                  name: patched_package_json
                  path: 'package.json'
            - name: Upload patched environment
              uses: actions/upload-artifact@v4
              with:
                  name: patched_environment
                  path: '.env.github'
    build:
        needs: prepare
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Download patched package.json
              uses: actions/download-artifact@v4
              with:
                  name: patched_package_json
            - name: Download patched environment
              uses: actions/download-artifact@v4
              with:
                  name: patched_environment
            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: '20.x'
                  registry-url: 'https://registry.npmjs.org'
            - run: npm ci
            - run: npm run build --if-present
            - name: Download patched app config
              uses: actions/download-artifact@v4
              with:
                  name: patched_config
                  path: 'dist/config/'
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  # Upload entire dist directory
                  path: 'dist/'
    deploy:
        needs: build
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        steps:
            - name: Setup Pages
              uses: actions/configure-pages@v5
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
